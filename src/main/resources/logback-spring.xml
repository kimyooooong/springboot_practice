<?xml version="1.0" encoding="UTF-8"?>

<!-- 10초마다 파일 변화를 체크하여 갱신시킨다. -->
<configuration scan="true" scanPeriod="10 seconds">

    <!--  파일 명 -->
    <property name ="LOG_FILE_NAME" value = "logback"/>
    <!-- 루트 로그 레벨 -->

    <!-- 디버그로 설정하면 디비로그도 좀보임 -->
    <property name ="LOG_LEVEL" value = "info"/>

    <!-- 분기에 따른 로그 파일 경로 -->
    <springProfile name = "local">
        <property name ="LOG_PATH" value = "./logs"/>
    </springProfile>

    <springProfile name = "dev , stage">
        <property name ="LOG_PATH" value = "/data1/logs"/>
    </springProfile>


    <!-- 운영일땐 info 로그로 설정. -->
    <springProfile name = "prod">
        <property name ="LOG_PATH" value = "./logs"/>
        <property name ="LOG_LEVEL" value = "info"/>
    </springProfile>

    <property name ="ERR_LOG_FILE_NAME" value = "${LOG_FILE_NAME}_error"/>

    <!-- 로그 파일 패턴 -->
    <property name ="LOG_PATTERN" value = "[%d{yyyy-MM-dd HH:mm:ss}] [%thread] [%logger{0}:%line] [%-5level] - %msg%n"/>

    <!-- 콘솔 Appender 설정 -->
    <appender name ="CONSOLE" class ="ch.qos.logback.core.ConsoleAppender">
        <encoder class ="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- 파일 Appender 설정 -->
    <appender name="FILE" class ="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 파일 경로 설정 -->
        <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>

        <!-- 로그 패턴 설정 -->
        <encoder class = "ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>

        <!-- 롤링 정책 -->
        <rollingPolicy class = "ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- gz, zip 등을 넣을 경우 자동 로그파일 압축 -->
            <fileNamePattern>${LOG_PATH}/%d{yyyy-MM-dd}/${LOG_FILE_NAME}_%i.log</fileNamePattern>

            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 파일당 최고 용량 -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 로그파일 최대 보관주기 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- 에러 관련 정책 -->
    <appender name = "ERROR" class ="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class ="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 에러 로그 별도로 파일 생성 -->
        <file>${LOG_PATH}/${ERR_LOG_FILE_NAME}.log</file>

        <!-- 로그 패턴 설정 -->
        <encoder class = "ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>

        <!-- 롤링 정책 -->
        <rollingPolicy class = "ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- gz, zip 등을 넣을 경우 자동 로그파일 압축 -->
            <fileNamePattern>${LOG_PATH}/%d{yyyy-MM-dd}/${ERR_LOG_FILE_NAME}_%i.log</fileNamePattern>

            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 파일당 최고 용량 -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

            <!-- 로그파일 최대 보관주기 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <logger name="jdbc.sqlonly" level="debug" additivity="false">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE"/>
    </logger>

    <root level = "${LOG_LEVEL}">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE"/>
        <appender-ref ref="ERROR"/>
    </root>


</configuration>